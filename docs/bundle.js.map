{"version":3,"file":"bundle.js","sources":["../src/main.ts"],"sourcesContent":["let canvas: HTMLCanvasElement\nlet ctx: CanvasRenderingContext2D\nconst gBoardHeight = 20\nconst gBoardWidth = 10\n// starting point on board\nlet startX = 4\nlet startY = 0\nlet score = 0\nlet winOrLose = \"Playing\"\nlet coordinateArray: Coordinates[][] = [...Array(gBoardHeight)].map(e => Array(gBoardWidth).fill(0))\nlet curTetromino: number[][] = [[1,0], [0,1], [1,1], [2,1]]\n\nconst tetrominos: number[][][] = []\nconst tetrominoColors = ['purple', 'cyan', 'blue', 'yellow', 'orange', 'green', 'red']\nlet curTetrominoColor: string\n\nconst gameBoardArray = [...Array(gBoardHeight)].map(e => Array(gBoardWidth).fill(0))\n\nlet stoppedShapeArray: (number | string)[][] = [...Array(gBoardHeight)].map(e => Array(gBoardWidth).fill(0))\n\nconst DIRECTION = {\n    IDLE: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n}\n\nlet direction = DIRECTION.IDLE\n\nclass Coordinates {\n    public xCoord: number\n    public yCoord: number\n\n    constructor(xCoord: number, yCoord: number) {\n        this.xCoord = xCoord\n        this.yCoord = yCoord\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', SetupCanvas)\n\nfunction CreateCoordinateArray() {\n    let i = 0, j = 0\n    for (let counter = 9; counter <= 446; counter += 23) {\n        for (let counter2 = 11; counter2 <= 264; counter2 += 23) {\n            coordinateArray[i][j] = new Coordinates(counter2, counter)\n            i++\n        }\n        j++\n        i = 0\n    }\n}\n\nfunction SetupCanvas() {\n    canvas = <HTMLCanvasElement>document.getElementById('my-canvas')\n    ctx = <CanvasRenderingContext2D>canvas.getContext('2d')\n    canvas.width = 936\n    canvas.height = 956\n\n    ctx.scale(1.5, 1.5)\n\n    ctx.fillStyle = 'white'\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n    ctx.strokeStyle = 'black'\n    ctx.strokeRect(8, 8, 280, 462)\n\n    // score\n    ctx.fillStyle = 'black'\n    ctx.font = '21px Arial'\n    ctx.fillText(\"Score\", 300, 98)\n\n    ctx.strokeRect(300, 107, 161, 24)\n\n    ctx.fillText(score.toString(), 310, 127)\n\n    ctx.fillText(\"WIN/LOSE\", 300, 221)\n    ctx.fillText(winOrLose, 310, 261)\n    ctx.strokeRect(300, 232, 161, 95)\n    ctx.fillText(\"CONTROLS\", 300, 354)\n    ctx.strokeRect(300, 366, 161, 104)\n    ctx.font = `19px Arial`\n    ctx.fillText(\"A: Move Left\", 310, 388)\n    ctx.fillText(\"D: Move Right\", 310, 413)\n    ctx.fillText(\"S: Move Down\", 310, 438)\n    ctx.fillText(\"W: Rotate Right\", 310, 463)\n\n\n    document.addEventListener('keydown', HandleKeyPress)\n    CreateTetrominos()\n    CreateTetromino()\n\n    CreateCoordinateArray()\n    DrawTetromino()\n}\n\nfunction DrawTetromino() {\n    for (let i = 0; i < curTetromino.length; i++) {\n        // location where tetromino shows\n        let xCoord = curTetromino[i][0] + startX\n        let yCoord = curTetromino[i][1] + startY\n        gameBoardArray[xCoord][yCoord] = 1\n\n        let coorX = coordinateArray[xCoord][yCoord].xCoord\n        let coorY = coordinateArray[xCoord][yCoord].yCoord\n        ctx.fillStyle = curTetrominoColor\n        ctx.fillRect(coorX, coorY, 21, 21)\n    }\n}\n\nfunction HandleKeyPress(key: KeyboardEvent) {\n    if (winOrLose != \"Game Over\") {\n        if (key.keyCode === 65) {\n            direction = DIRECTION.LEFT\n            if (!HittingTheWall() && !CheckforHorizonalCollision()) {\n                DeleteTetromino()\n                startX--\n                DrawTetromino()\n            }\n        } else if (key.keyCode === 68) {\n            direction = DIRECTION.RIGHT\n            if (!HittingTheWall() && !CheckforHorizonalCollision()) {\n                DeleteTetromino()\n                startX++\n                DrawTetromino()\n            }\n        } else if (key.keyCode === 83) {\n            MoveTetrominoDown()\n        } else if (key.keyCode === 87) {\n            RotateTetromino()\n        }\n    }\n}\n\nfunction MoveTetrominoDown() {\n    if (!CheckForVerticalCollison()) {\n        direction = DIRECTION.DOWN\n        DeleteTetromino()\n        startY++\n        DrawTetromino()\n    }\n}\n\nwindow.setInterval(function() {\n    if (winOrLose != \"Game Over\") {\n        MoveTetrominoDown()\n    }\n}, 1000)\n\nfunction DeleteTetromino() {\n    for (let counter = 0; counter < curTetromino.length; counter++) {\n        let xVal = curTetromino[counter][0] + startX\n        let yVal = curTetromino[counter][1] + startY\n        gameBoardArray[xVal][yVal] = 0\n        let coorX = coordinateArray[xVal][yVal].xCoord\n        let coorY = coordinateArray[xVal][yVal].yCoord\n        ctx.fillStyle = 'white' // Use white to clear the previous block\n        ctx.fillRect(coorX, coorY, 21, 21)\n    }\n}\n\nfunction CreateTetrominos() {\n    // T\n    tetrominos.push([[1,0], [0,1], [1,1], [2,1]])\n    // I\n    tetrominos.push([[0,0], [1,0], [2,0], [3,0]])\n    // J\n    tetrominos.push([[0,0], [0,1], [1,1], [2,1]])\n    // O\n    tetrominos.push([[0,0], [1,0], [0,1], [1,1]])\n    // L\n    tetrominos.push([[2,0], [0,1], [1,1], [2,1]])\n    // Z\n    tetrominos.push([[1,0], [2,0], [0,1], [1,1]])\n    // S\n    tetrominos.push([[0,0], [1,0], [1,1], [2,1]])\n}\n\nfunction CreateTetromino() {\n    // Get a random tetromino index\n    let randomTetromino = Math.floor(Math.random() * tetrominos.length)\n    // Set the one to draw\n    curTetromino = tetrominos[randomTetromino]\n    // Get the color for it\n    curTetrominoColor = tetrominoColors[randomTetromino]\n}\n\n\nfunction HittingTheWall() {\n    for (let i = 0; i < curTetromino.length; i++) {\n        let newX = curTetromino[i][0] + startX\n        if (newX <= 0 && direction === DIRECTION.LEFT) {\n            return true\n        } else if (newX >= 11 && direction == DIRECTION.RIGHT) {\n            return true\n        }\n    }\n    return false\n}\n\nfunction CheckForVerticalCollison() {\n    let tetrominoCopy = curTetromino;\n    let collision = false;\n\n    for (let i = 0; i < tetrominoCopy.length; i++) {\n        let square = tetrominoCopy[i];\n        let x = square[0] + startX;\n        let y = square[1] + startY;\n\n        if (direction === DIRECTION.DOWN) {\n            y++;\n        }\n\n        // Check if it hits the bottom of the board\n        if (y >= gBoardHeight) {\n            collision = true;\n            break;\n        }\n\n        // Check if it hits a stopped shape\n        if (y < gBoardHeight && gameBoardArray[x][y] === 1) {\n            if (typeof stoppedShapeArray[x][y] === 'string') {\n                collision = true;\n                break;\n            }\n        }\n    }\n\n    if (collision) {\n        if (startY <= 2) {\n            winOrLose = \"Game Over\";\n            ctx.fillStyle = 'white';\n            ctx.fillRect(310, 242, 140, 30);\n            ctx.fillStyle = \"black\";\n            ctx.fillText(winOrLose, 310, 261);\n        } else {\n            for (let i = 0; i < tetrominoCopy.length; i++) {\n                let square = tetrominoCopy[i];\n                let x = square[0] + startX;\n                let y = square[1] + startY;\n                stoppedShapeArray[x][y] = curTetrominoColor;\n            }\n            CheckForCompletedRows();\n            CreateTetromino();\n            direction = DIRECTION.IDLE;\n            startX = 4;\n            startY = 0;\n            DrawTetromino();\n        }\n    }\n\n    return collision;\n}\n\n\nfunction CheckforHorizonalCollision() {\n    let tetrominoCopy = curTetromino\n    let collision = false\n    for (let i = 0; i < tetrominoCopy.length; i++) {\n        let square = tetrominoCopy[i]\n        let x = square[0] + startX\n        let y = square[1] + startY\n\n        if (direction === DIRECTION.LEFT) {\n            x--\n        } else if (direction === DIRECTION.RIGHT) {\n            x ++\n        }\n        let stoppedShapeArrayVal = stoppedShapeArray[x][y]\n        if (typeof stoppedShapeArrayVal === 'string') {\n            collision = true\n            break\n        }\n    }\n    return collision\n}\n\nfunction CheckForCompletedRows(){\n\n    // 8. Track how many rows to delete and where to start deleting\n    let rowsToDelete = 0;\n    let startOfDeletion = 0;\n\n    // Check every row to see if it has been completed\n    for (let y = 0; y < gBoardHeight; y++)\n    {\n        let completed = true;\n        // Cycle through x values\n        for(let x = 0; x < gBoardWidth; x++)\n        {\n            // Get values stored in the stopped block array\n            let square = stoppedShapeArray[x][y];\n\n            // Check if nothing is there\n            if (square === 0 || (typeof square === 'undefined'))\n            {\n                // If there is nothing there once then jump out\n                // because the row isn't completed\n                completed=false;\n                break;\n            }\n        }\n\n        // If a row has been completed\n        if (completed)\n        {\n            // 8. Used to shift down the rows\n            if(startOfDeletion === 0) startOfDeletion = y;\n            rowsToDelete++;\n\n            // Delete the line everywhere\n            for(let i = 0; i < gBoardWidth; i++)\n            {\n                // Update the arrays by deleting previous squares\n                stoppedShapeArray[i][y] = 0;\n                gameBoardArray[i][y] = 0;\n                // Look for the x & y values in the lookup table\n                let coorX = coordinateArray[i][y].xCoord;\n                let coorY = coordinateArray[i][y].yCoord;\n                // Draw the square as white\n                ctx.fillStyle = 'white';\n                ctx.fillRect(coorX, coorY, 21, 21);\n            }\n        }\n    }\n    if(rowsToDelete > 0){\n        score += 10;\n        ctx.fillStyle = 'white';\n        ctx.fillRect(310, 109, 140, 19);\n        ctx.fillStyle = 'black';\n        ctx.fillText(score.toString(), 310, 127);\n        MoveAllRowsDown(rowsToDelete, startOfDeletion);\n    }\n}\n\n\nfunction MoveAllRowsDown(rowsToDelete: number, startOfDeletion: number){\n    for (var i = startOfDeletion-1; i >= 0; i--)\n    {\n        for(var x = 0; x < gBoardWidth; x++)\n        {\n            var y2 = i + rowsToDelete;\n            var square = stoppedShapeArray[x][i];\n            var nextSquare = stoppedShapeArray[x][y2];\n\n            if (typeof square === 'string')\n            {\n                nextSquare = square;\n                gameBoardArray[x][y2] = 1; // Put block into GBA\n                stoppedShapeArray[x][y2] = square; // Draw color into stopped\n\n                // Look for the x & y values in the lookup table\n                let coorX = coordinateArray[x][y2].xCoord;\n                let coorY = coordinateArray[x][y2].yCoord;\n                ctx.fillStyle = nextSquare;\n                ctx.fillRect(coorX, coorY, 21, 21);\n\n                square = 0;\n                gameBoardArray[x][i] = 0; // Clear the spot in GBA\n                stoppedShapeArray[x][i] = 0; // Clear the spot in SSA\n                coorX = coordinateArray[x][i].xCoord;\n                coorY = coordinateArray[x][i].yCoord;\n                ctx.fillStyle = 'white';\n                ctx.fillRect(coorX, coorY, 21, 21);\n            }\n        }\n    }\n}\n\nfunction RotateTetromino() {\n    let newRotation: number[][] = [];\n    let tetrominoCopy = curTetromino;\n    let curTetrominoBU: number[][] = [...curTetromino]; // backup\n\n    for (let i = 0; i < tetrominoCopy.length; i++) {\n        let x = tetrominoCopy[i][0];\n        let y = tetrominoCopy[i][1];\n        let newX = GetLastSquareX() - y;\n        let newY = x;\n        newRotation.push([newX, newY]);\n    }\n\n    DeleteTetromino();\n    try {\n        curTetromino = newRotation;\n        DrawTetromino();\n    } catch (e) {\n        if (e instanceof TypeError) {\n            curTetromino = curTetrominoBU;\n            DeleteTetromino();\n            DrawTetromino();\n        }\n    }\n}\n\n\nfunction GetLastSquareX() {\n    let lastX = 0 \n    for (let i = 0 ; i < curTetromino.length; i++) {\n        let square = curTetromino[i]\n        if (square[0] > lastX)\n            lastX = square[0]\n    }\n    return lastX\n}"],"names":["canvas","ctx","gBoardHeight","gBoardWidth","startX","startY","score","winOrLose","coordinateArray","Array","map","e","fill","curTetromino","tetrominos","tetrominoColors","curTetrominoColor","gameBoardArray","stoppedShapeArray","DIRECTION","IDLE","DOWN","LEFT","RIGHT","direction","Coordinates","constructor","xCoord","yCoord","Object","defineProperty","this","DrawTetromino","i","length","coorX","coorY","fillStyle","fillRect","HandleKeyPress","key","keyCode","HittingTheWall","CheckforHorizonalCollision","DeleteTetromino","MoveTetrominoDown","newRotation","tetrominoCopy","curTetrominoBU","x","y","newX","GetLastSquareX","newY","push","TypeError","RotateTetromino","collision","square","fillText","rowsToDelete","startOfDeletion","completed","toString","y2","nextSquare","MoveAllRowsDown","CheckForCompletedRows","CreateTetromino","CheckForVerticalCollison","counter","xVal","yVal","randomTetromino","Math","floor","random","lastX","document","addEventListener","getElementById","getContext","width","height","scale","strokeStyle","strokeRect","font","j","counter2","CreateCoordinateArray","window","setInterval"],"mappings":"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"}